function [U] = HeatEqnSolver(type, U, dt, Nr, Nz, tf, interval, d1, d2)
    [R, Z, dr, dz] = GetRZ(Nr, Nz, interval);

    tvals = (0:dt:tf)';
    if tvals(end) ~= tf
        tvals = [tvals; tf];
    end

    tridiag = diag(R(2:end)'-(dr/2), -1) + diag(-2*R') + diag(R(1:end-1)+(dr/2), 1);
    Drr = d1 .* (1./(dr^2)) .* (diag(1./R) .* tridiag);% gallery('tridiag', Nr, R(2:end)-(dr/2), -2*R, R(1:end-1)+(dr/2)));
    Dzz = d2 .* (1./(dz^2)) .* gallery('tridiag', Nz, 1, -2, 1);

    Drr(1, 1) = -(R(1) + (dr/2));
  
    for n = 2:numel(tvals)
        dt = tvals(n) - tvals(n-1);

        switch type
            case '1'
                U = BackwardEulerTimestep(U, tvals(n), dt, dr, dz, Drr, Dzz);
        end

        % if mod(n, 1) == 0
        %     figure(1); clf; surf(R, Z, U);
        %     colorbar;
        %     shading flat; % removes gridlines
        %     xlabel('X'); ylabel('Y'); zlabel('U(X, Y)'); title([sprintf('RAIL approximation at time %s', num2str(tf, 4))]);
        %     view(3);
        % end
    end
end